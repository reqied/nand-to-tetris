// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */


CHIP CPU {

    IN  inM[16],      // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // если instruction[15] = 0, то лежит A-инструкция (установка значения A)
    // если instruction[15] = 1 , то лежит C-инструкцию (какая-то арифметическая операция)
	Not(in=instruction[15],out=isAInstruction);

    // выбор входа для регистра A
    // если A-инстр. записываем instruction.
    // если C-инстр. записываем результат ALU (если флаг 5 бит 1(пояснения строчка 51))
	Mux16(a=aluOut,b=instruction,sel=isAInstruction,out=aRegisterInput);

    // определяем, записывать ли значение в регистр A(случай если прилетела C-инструкция, 5..3 бит - dest, если 5 бит 1, записать в ARegister)
	Or(a=isAInstruction,b=instruction[5],out=writeIntoA);

    // регистр A хранит адрес (для M) или какую-то чиселку
    //(пояснялка для меня)((за что отвечает арегистр: rогда новое значение должно быть записано в регистр A (через сигнал intoA)
    //Передаёт младшие 15 бит значения регистра A для управления памятью (addressM)
    //Предоставляет значение регистра A для других операций CPU (например, как вход ALU)))
	ARegister(in=aRegisterInput,load=writeIntoA,out=aRegOut,out[0..14]=addressM);
	Mux16(a=aRegOut,b=inM,sel=instruction[12],out=aOrMOut);

    // регистр D хранит значение, если в C-инструкции указан флаг loadD
	And(a=instruction[15],b=instruction[4],out=writeIntoD);
	DRegister(in=aluOut,load=writeIntoD,out=dRegOut);

	//биты computation
	ALU(x=dRegOut,y=aOrMOut,zx=instruction[11],nx=instruction[10],zy=instruction[9],
        ny=instruction[8],f=instruction[7],no=instruction[6],out=aluOut,out=outM,
        zr=zr,ng=ng);
    
    // устанавливаем флаг записи в RAM (writeM)
    // это возможно только при C-инструкции с нужным флагом
	And(a=instruction[15],b=instruction[3],out=writeM);

    // логика переходов (jump):
    // ng и zr отвечают за прыг
	Not(in=ng, out=positiveNum); // если ng = 0 (результат не отрицательный), то positiveNum = 1
    Not(in=zr, out=notZero);     // если zr = 0 (результат не равен нулю), то notZero = 1
    And(a=notZero, b=positiveNum, out=posAndNZeroNum);
    
    // jgt: переход если результат > 0 (positive и не ноль).
    // instruction[0] означает, что бит jgt включен
    // jgt = 1, если C-инструкция требует перехода если>0
    And(a=posAndNZeroNum, b=instruction[0], out=doJGT); //сигнал для выполнения перехода по условию jgt (результат > 0)

	And(a=instruction[1], b=zr,out=doJEQ); //сигнал для выполнения перехода по условию jeq (результат == 0)

	And(a=instruction[2],b=ng,out=doJLT); //сигнал для выполнения перехода по условию jlt (результат < 0)

    // объединяем условия jump
	Or(a=doJGT,b=doJEQ,out=preFinalJumpSignal);
	Or(a=doJLT,b=preFinalJumpSignal,out=finalJumpSignal);
    And(a=finalJumpSignal, b=instruction[15], out=jump);

    // если сигнал прыжка = 1, то загружаем адрес из регистра A
    // иначе увеличиваем счетчик (inc=true). 
	PC(in=aRegOut,load=jump,inc=true,reset=reset,out[0..14]=pc);
}